local addonName = ...
local frame = CreateFrame("Frame")

-- Accountweite SavedVariable initialisieren
if not WhichMythDidIRunDB then
    WhichMythDidIRunDB = { pos = nil, scale = 1.0, debugMode = false }
end

-- üåç Lokalisierungstabelle
local L = {}
local locale = GetLocale()

local translations = {
    ["enUS"] = { 
        title = "Myth+ Runs", moveHint = "Shift + Left Click to move", bestTime = "Best Time: ",
        scaleText = "Frame Size", settingsHint = "Open Settings", refreshHint = "Refresh Data",
        debugText = "Debug Mode", debugTooltip = "Show debug messages in chat",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Debug mode enabled", debugDisabled = "Debug mode disabled",
        -- Debug Strings
        debug_event_received = "Event received: %s",
        debug_update_start = "Starting UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Update already active, skipping...",
        debug_no_maps = "No map table available!",
        debug_found_maps = "%d maps found",
        debug_found_dungeons = "%d dungeons with data",
        debug_dungeon_entry = "%s -> Level %d",
        debug_no_changes = "No changes detected, skipping UI update",
        debug_manual_refresh = "Manual refresh triggered",
        debug_polling_start = "Starting aggressive polling...",
        debug_polling_try = "Polling attempt %d",
        debug_polling_end = "Polling ended after %d attempts",
        debug_login_update = "Login update after %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Login: %s Reload: %s",
        debug_challenge_completed = "Myth+ dungeon completed!",
        debug_standard_update = "Standard update for event: %s"
    },
    ["deDE"] = { 
        title = "Myth+ L√§ufe", moveHint = "Shift + Linksklick zum Verschieben", bestTime = "Beste Zeit: ",
        scaleText = "Fenstergr√∂√üe", settingsHint = "Einstellungen √∂ffnen", refreshHint = "Daten aktualisieren",
        debugText = "Debug-Modus", debugTooltip = "Debug-Nachrichten im Chat anzeigen",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Debug-Modus aktiviert", debugDisabled = "Debug-Modus deaktiviert",
        -- Debug Strings
        debug_event_received = "Event empfangen: %s",
        debug_update_start = "Starte UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Update bereits aktiv, √ºberspringe...",
        debug_no_maps = "Keine Map-Tabelle verf√ºgbar!",
        debug_found_maps = "%d Karten gefunden",
        debug_found_dungeons = "%d Dungeons mit Daten gefunden",
        debug_dungeon_entry = "%s -> Stufe %d",
        debug_no_changes = "Keine √Ñnderungen gefunden, √ºberspringe UI-Update",
        debug_manual_refresh = "Manueller Refresh-Button gedr√ºckt!",
        debug_polling_start = "Starte aggressives Polling...",
        debug_polling_try = "Polling Versuch %d",
        debug_polling_end = "Polling beendet nach %d Versuchen",
        debug_login_update = "Login-Update nach %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Login: %s Reload: %s",
        debug_challenge_completed = "Myth+ Dungeon abgeschlossen!",
        debug_standard_update = "Standard-Update f√ºr Event: %s"
    },
    ["frFR"] = { 
        title = "Courses Myth+", moveHint = "Maj + Clic gauche pour d√©placer", bestTime = "Meilleur temps : ",
        scaleText = "Taille de la fen√™tre", settingsHint = "Ouvrir les param√®tres", refreshHint = "Actualiser les donn√©es",
        debugText = "Mode D√©bogage", debugTooltip = "Afficher les messages de d√©bogage dans le chat",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Mode d√©bogage activ√©", debugDisabled = "Mode d√©bogage d√©sactiv√©",
        -- Debug Strings
        debug_event_received = "√âv√©nement re√ßu : %s",
        debug_update_start = "D√©marrage de UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Mise √† jour d√©j√† active, ignorer...",
        debug_no_maps = "Aucune table de cartes disponible !",
        debug_found_maps = "%d cartes trouv√©es",
        debug_found_dungeons = "%d donjons avec donn√©es",
        debug_dungeon_entry = "%s -> Niveau %d",
        debug_no_changes = "Aucun changement d√©tect√©, ignorer la mise √† jour de l'interface",
        debug_manual_refresh = "Actualisation manuelle d√©clench√©e",
        debug_polling_start = "D√©marrage du sondage agressif...",
        debug_polling_try = "Tentative de sondage %d",
        debug_polling_end = "Sondage termin√© apr√®s %d tentatives",
        debug_login_update = "Mise √† jour de connexion apr√®s %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Connexion : %s Rechargement : %s",
        debug_challenge_completed = "Donjon Myth+ termin√© !",
        debug_standard_update = "Mise √† jour standard pour l'√©v√©nement : %s"
    },
    ["esES"] = { 
        title = "Carreras de M√≠tico+", moveHint = "May√∫s + Clic izquierdo para mover", bestTime = "Mejor tiempo: ",
        scaleText = "Tama√±o del marco", settingsHint = "Abrir ajustes", refreshHint = "Actualizar datos",
        debugText = "Modo Depuraci√≥n", debugTooltip = "Mostrar mensajes de depuraci√≥n en el chat",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Modo depuraci√≥n activado", debugDisabled = "Modo depuraci√≥n desactivado",
        -- Debug Strings
        debug_event_received = "Evento recibido: %s",
        debug_update_start = "Iniciando UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Actualizaci√≥n ya activa, saltando...",
        debug_no_maps = "¬°No hay tabla de mapas disponible!",
        debug_found_maps = "%d mapas encontrados",
        debug_found_dungeons = "%d mazmorras con datos",
        debug_dungeon_entry = "%s -> Nivel %d",
        debug_no_changes = "No se detectaron cambios, saltando actualizaci√≥n de interfaz",
        debug_manual_refresh = "Actualizaci√≥n manual activada",
        debug_polling_start = "Iniciando sondeo agresivo...",
        debug_polling_try = "Intento de sondeo %d",
        debug_polling_end = "Sondeo finalizado despu√©s de %d intentos",
        debug_login_update = "Actualizaci√≥n de inicio de sesi√≥n despu√©s de %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Inicio de sesi√≥n: %s Recarga: %s",
        debug_challenge_completed = "¬°Mazmorra M√≠tico+ completada!",
        debug_standard_update = "Actualizaci√≥n est√°ndar para el evento: %s"
    },
    ["esMX"] = { 
        title = "Carreras de M√≠tico+", moveHint = "May√∫s + Clic izquierdo para mover", bestTime = "Mejor tiempo: ",
        scaleText = "Tama√±o del marco", settingsHint = "Abrir ajustes", refreshHint = "Actualizar datos",
        debugText = "Modo Depuraci√≥n", debugTooltip = "Mostrar mensajes de depuraci√≥n en el chat",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Modo depuraci√≥n activado", debugDisabled = "Modo depuraci√≥n desactivado",
        -- Debug Strings
        debug_event_received = "Evento recibido: %s",
        debug_update_start = "Iniciando UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Actualizaci√≥n ya activa, saltando...",
        debug_no_maps = "¬°No hay tabla de mapas disponible!",
        debug_found_maps = "%d mapas encontrados",
        debug_found_dungeons = "%d mazmorras con datos",
        debug_dungeon_entry = "%s -> Nivel %d",
        debug_no_changes = "No se detectaron cambios, saltando actualizaci√≥n de interfaz",
        debug_manual_refresh = "Actualizaci√≥n manual activada",
        debug_polling_start = "Iniciando sondeo agresivo...",
        debug_polling_try = "Intento de sondeo %d",
        debug_polling_end = "Sondeo finalizado despu√©s de %d intentos",
        debug_login_update = "Actualizaci√≥n de inicio de sesi√≥n despu√©s de %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Inicio de sesi√≥n: %s Recarga: %s",
        debug_challenge_completed = "¬°Mazmorra M√≠tico+ completada!",
        debug_standard_update = "Actualizaci√≥n est√°ndar para el evento: %s"
    },
    ["ruRU"] = { 
        title = "–†–µ–π–¥—ã –ú–∏—Ñ+", moveHint = "Shift + –õ–µ–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è", bestTime = "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: ",
        scaleText = "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", settingsHint = "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", refreshHint = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
        debugText = "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", debugTooltip = "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω", debugDisabled = "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω",
        -- Debug Strings
        debug_event_received = "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: %s",
        debug_update_start = "–ó–∞–ø—É—Å–∫ UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫...",
        debug_no_maps = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ä—Ç!",
        debug_found_maps = "–ù–∞–π–¥–µ–Ω–æ %d –∫–∞—Ä—Ç",
        debug_found_dungeons = "%d –ø–æ–¥–∑–µ–º–µ–ª–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏",
        debug_dungeon_entry = "%s -> –£—Ä–æ–≤–µ–Ω—å %d",
        debug_no_changes = "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI",
        debug_manual_refresh = "–ó–∞–ø—É—â–µ–Ω–æ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
        debug_polling_start = "–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞...",
        debug_polling_try = "–ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–æ—Å–∞ %d",
        debug_polling_end = "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫",
        debug_login_update = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - –í—Ö–æ–¥: %s –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: %s",
        debug_challenge_completed = "–ü–æ–¥–∑–µ–º–µ–ª—å–µ –ú–∏—Ñ+ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        debug_standard_update = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: %s"
    },
    ["ptBR"] = {
        title = "Runs M√≠tica+", moveHint = "Shift + Clique Esquerdo para mover", bestTime = "Melhor Tempo: ",
        scaleText = "Tamanho da Moldura", settingsHint = "Abrir Configura√ß√µes", refreshHint = "Atualizar Dados",
        debugText = "Modo Depura√ß√£o", debugTooltip = "Mostrar mensagens de depura√ß√£o no chat",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Modo depura√ß√£o ativado", debugDisabled = "Modo depura√ß√£o desativado",
        -- Debug Strings
        debug_event_received = "Evento recebido: %s",
        debug_update_start = "Iniciando UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Atualiza√ß√£o j√° ativa, pulando...",
        debug_no_maps = "Nenhuma tabela de mapa dispon√≠vel!",
        debug_found_maps = "%d mapas encontrados",
        debug_found_dungeons = "%d masmorras com dados",
        debug_dungeon_entry = "%s -> N√≠vel %d",
        debug_no_changes = "Nenhuma altera√ß√£o detectada, pulando atualiza√ß√£o de UI",
        debug_manual_refresh = "Atualiza√ß√£o manual acionada",
        debug_polling_start = "Iniciando sondagem agressiva...",
        debug_polling_try = "Tentativa de sondagem %d",
        debug_polling_end = "Sondagem encerrada ap√≥s %d tentativas",
        debug_login_update = "Atualiza√ß√£o de login ap√≥s %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Login: %s Recarregar: %s",
        debug_challenge_completed = "Masmorra M√≠tica+ conclu√≠da!",
        debug_standard_update = "Atualiza√ß√£o padr√£o para o evento: %s"
    },
    ["itIT"] = {
        title = "Run Mitiche+", moveHint = "Shift + Clic Sinistro per spostare", bestTime = "Miglior Tempo: ",
        scaleText = "Dimensione Finestra", settingsHint = "Apri Impostazioni", refreshHint = "Aggiorna Dati",
        debugText = "Modalit√† Debug", debugTooltip = "Mostra messaggi di debug in chat",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Modalit√† debug abilitata", debugDisabled = "Modalit√† debug disabilitata",
        -- Debug Strings
        debug_event_received = "Evento ricevuto: %s",
        debug_update_start = "Avvio UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Aggiornamento gi√† attivo, salto...",
        debug_no_maps = "Nessuna tabella delle mappe disponibile!",
        debug_found_maps = "%d mappe trovate",
        debug_found_dungeons = "%d dungeon con dati",
        debug_dungeon_entry = "%s -> Livello %d",
        debug_no_changes = "Nessuna modifica rilevata, salto aggiornamento UI",
        debug_manual_refresh = "Aggiornamento manuale attivato",
        debug_polling_start = "Avvio polling aggressivo...",
        debug_polling_try = "Tentativo di polling %d",
        debug_polling_end = "Polling terminato dopo %d tentativi",
        debug_login_update = "Aggiornamento login dopo %ds",
        debug_login_state = "PLAYER_ENTERING_WORLD - Login: %s Ricarica: %s",
        debug_challenge_completed = "Dungeon Mitico+ completato!",
        debug_standard_update = "Aggiornamento standard per evento: %s"
    },
    ["koKR"] = {
        title = "Ïã†Ìôî+ ÎçòÏ†Ñ", moveHint = "Shift + Ï¢åÌÅ¥Î¶≠ÏúºÎ°ú Ïù¥Îèô", bestTime = "ÏµúÍ≥† ÏãúÍ∞Ñ: ",
        scaleText = "Ï∞Ω ÌÅ¨Í∏∞", settingsHint = "ÏÑ§Ï†ï Ïó¥Í∏∞", refreshHint = "Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®",
        debugText = "ÎîîÎ≤ÑÍ∑∏ Î™®Îìú", debugTooltip = "Ï±ÑÌåÖÏóê ÎîîÎ≤ÑÍ∑∏ Î©îÏãúÏßÄ ÌëúÏãú",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî", debugDisabled = "ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÎπÑÌôúÏÑ±Ìôî",
        -- Debug Strings
        debug_event_received = "Ïù¥Î≤§Ìä∏ ÏàòÏã†: %s",
        debug_update_start = "UpdateDungeonList ÏãúÏûë (forceUpdate=%s)",
        debug_update_skip = "ÏóÖÎç∞Ïù¥Ìä∏ Ïù¥ÎØ∏ ÌôúÏÑ±Ìôî, Í±¥ÎÑàÎõ∞Í∏∞...",
        debug_no_maps = "ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏßÄÎèÑ ÌÖåÏù¥Î∏î ÏóÜÏùå!",
        debug_found_maps = "ÏßÄÎèÑ %dÍ∞ú Î∞úÍ≤¨",
        debug_found_dungeons = "Îç∞Ïù¥ÌÑ∞ ÏûàÎäî ÎçòÏ†Ñ %dÍ∞ú",
        debug_dungeon_entry = "%s -> Î†àÎ≤® %d",
        debug_no_changes = "Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ ÏóÜÏùå, UI ÏóÖÎç∞Ïù¥Ìä∏ Í±¥ÎÑàÎõ∞Í∏∞",
        debug_manual_refresh = "ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìñâ",
        debug_polling_start = "Í≥µÍ≤©Ï†ÅÏù∏ Ìè¥ÎßÅ ÏãúÏûë...",
        debug_polling_try = "Ìè¥ÎßÅ ÏãúÎèÑ %d",
        debug_polling_end = "Ìè¥ÎßÅ %dÎ≤à ÏãúÎèÑ ÌõÑ Ï¢ÖÎ£å",
        debug_login_update = "%dÏ¥à ÌõÑ Î°úÍ∑∏Ïù∏ ÏóÖÎç∞Ïù¥Ìä∏",
        debug_login_state = "PLAYER_ENTERING_WORLD - Î°úÍ∑∏Ïù∏: %s Ïû¨ÏãúÏûë: %s",
        debug_challenge_completed = "Ïã†Ìôî+ ÎçòÏ†Ñ ÏôÑÎ£å!",
        debug_standard_update = "Ïù¥Î≤§Ìä∏Ïóê ÎåÄÌïú ÌëúÏ§Ä ÏóÖÎç∞Ïù¥Ìä∏: %s"
    },
    ["zhCN"] = {
        title = "Â§ßÁßòÂ¢ÉËÆ∞ÂΩï", moveHint = "Êåâ‰Ωè Shift + Èº†Ê†áÂ∑¶ÈîÆÁßªÂä®", bestTime = "ÊúÄ‰Ω≥Êó∂Èó¥: ",
        scaleText = "Ê°ÜÊû∂Â§ßÂ∞è", settingsHint = "ÊâìÂºÄËÆæÁΩÆ", refreshHint = "Âà∑Êñ∞Êï∞ÊçÆ",
        debugText = "Ë∞ÉËØïÊ®°Âºè", debugTooltip = "Âú®ËÅäÂ§©‰∏≠ÊòæÁ§∫Ë∞ÉËØïÊ∂àÊÅØ",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Ë∞ÉËØïÊ®°ÂºèÂ∑≤ÂêØÁî®", debugDisabled = "Ë∞ÉËØïÊ®°ÂºèÂ∑≤Á¶ÅÁî®",
        -- Debug Strings
        debug_event_received = "Êé•Êî∂Âà∞‰∫ã‰ª∂: %s",
        debug_update_start = "ÂºÄÂßã UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Êõ¥Êñ∞Â∑≤ÊøÄÊ¥ª, Ë∑≥Ëøá...",
        debug_no_maps = "Ê≤°ÊúâÂú∞ÂõæË°®ÂèØÁî®!",
        debug_found_maps = "ÊâæÂà∞ %d ‰∏™Âú∞Âõæ",
        debug_found_dungeons = "ÊúâÊï∞ÊçÆÁöÑÂâØÊú¨ %d ‰∏™",
        debug_dungeon_entry = "%s -> Á≠âÁ∫ß %d",
        debug_no_changes = "Êú™Ê£ÄÊµãÂà∞Êõ¥Êîπ, Ë∑≥Ëøá UI Êõ¥Êñ∞",
        debug_manual_refresh = "ÊâãÂä®Âà∑Êñ∞Â∑≤Ëß¶Âèë",
        debug_polling_start = "ÂºÄÂßã‰æµÁï•ÊÄßËΩÆËØ¢...",
        debug_polling_try = "ËΩÆËØ¢Â∞ùËØï %d Ê¨°",
        debug_polling_end = "ËΩÆËØ¢Âú® %d Ê¨°Â∞ùËØïÂêéÁªìÊùü",
        debug_login_update = "ÁôªÂΩïÊõ¥Êñ∞Âú® %d ÁßíÂêé",
        debug_login_state = "PLAYER_ENTERING_WORLD - ÁôªÂΩï: %s ÈáçËΩΩ: %s",
        debug_challenge_completed = "Â§ßÁßòÂ¢ÉÂ∑≤ÂÆåÊàê!",
        debug_standard_update = "‰∫ã‰ª∂ÁöÑÊ†áÂáÜÊõ¥Êñ∞: %s"
    },
    ["zhTW"] = {
        title = "ÂÇ≥Â•áÈë∞Áü≥Á¥ÄÈåÑ", moveHint = "Êåâ‰Ωè Shift + ÊªëÈº†Â∑¶ÈçµÁßªÂãï", bestTime = "ÊúÄ‰Ω≥ÊôÇÈñì: ",
        scaleText = "Ê°ÜÊû∂Â§ßÂ∞è", settingsHint = "ÈñãÂïüË®≠ÂÆö", refreshHint = "ÈáçÊñ∞Êï¥ÁêÜË≥áÊñô",
        debugText = "Èô§ÈåØÊ®°Âºè", debugTooltip = "Âú®ËÅäÂ§©‰∏≠È°ØÁ§∫Èô§ÈåØË®äÊÅØ",
        debugPrefix = "[WhichMythDidIRun]", debugEnabled = "Èô§ÈåØÊ®°ÂºèÂ∑≤ÂïüÁî®", debugDisabled = "Èô§ÈåØÊ®°ÂºèÂ∑≤Á¶ÅÁî®",
        -- Debug Strings
        debug_event_received = "Êé•Êî∂Âà∞‰∫ã‰ª∂: %s",
        debug_update_start = "ÈñãÂßã UpdateDungeonList (forceUpdate=%s)",
        debug_update_skip = "Êõ¥Êñ∞Â∑≤ÂïüÁî®, Ë∑≥ÈÅé...",
        debug_no_maps = "Ê≤íÊúâÂú∞ÂúñË°®ÂèØÁî®!",
        debug_found_maps = "ÊâæÂà∞ %d ÂÄãÂú∞Âúñ",
        debug_found_dungeons = "ÊúâË≥áÊñôÁöÑÂâØÊú¨ %d ÂÄã",
        debug_dungeon_entry = "%s -> Á≠âÁ¥ö %d",
        debug_no_changes = "Êú™ÂÅµÊ∏¨Âà∞ËÆäÊõ¥, Ë∑≥ÈÅé UI Êõ¥Êñ∞",
        debug_manual_refresh = "ÊâãÂãïÈáçÊñ∞Êï¥ÁêÜÂ∑≤Ëß∏Áôº",
        debug_polling_start = "ÈñãÂßãÁ©çÊ•µËº™Ë©¢...",
        debug_polling_try = "Ëº™Ë©¢ÂòóË©¶ %d Ê¨°",
        debug_polling_end = "Ëº™Ë©¢Âú® %d Ê¨°ÂòóË©¶ÂæåÁµêÊùü",
        debug_login_update = "ÁôªÂÖ•Êõ¥Êñ∞Âú® %d ÁßíÂæå",
        debug_login_state = "PLAYER_ENTERING_WORLD - ÁôªÂÖ•: %s ÈáçËºâ: %s",
        debug_challenge_completed = "ÂÇ≥Â•áÈë∞Áü≥ÂâØÊú¨Â∑≤ÂÆåÊàê!",
        debug_standard_update = "‰∫ã‰ª∂ÁöÑÊ®ôÊ∫ñÊõ¥Êñ∞: %s"
    },
}

L = translations[locale] or translations["enUS"]

-- üêõ Debug-Funktion mit Lokalisierung
local function DebugPrint(message)
    if WhichMythDidIRunDB.debugMode then
        print(L.debugPrefix .. " " .. message)
    end
end

-- üéØ Globale Variablen f√ºr besseres Update-Management
local currentDungeonData = {}
local updateTimer = nil
local isUpdating = false

-- Hauptframe
local displayFrame = CreateFrame("Frame", "WhichMythDidIRunFrame", UIParent, "BackdropTemplate")
displayFrame:SetSize(280, 250)
displayFrame:SetScale(WhichMythDidIRunDB.scale or 1.0)

-- Position laden oder Standard
if WhichMythDidIRunDB.pos then
    displayFrame:SetPoint(
        WhichMythDidIRunDB.pos.point,
        UIParent,
        WhichMythDidIRunDB.pos.relativePoint,
        WhichMythDidIRunDB.pos.xOfs,
        WhichMythDidIRunDB.pos.yOfs
    )
else
    displayFrame:SetPoint("TOPLEFT", GroupFinderFrame, "BOTTOMLEFT", 0, -5)
end

-- üé® Hintergrund + runde Ecken
displayFrame:SetBackdrop({
    bgFile = "Interface\\ChatFrame\\ChatFrameBackground",
    edgeFile = "Interface\\Tooltips\\UI-Tooltip-Border",
    tile = true,
    tileSize = 16,
    edgeSize = 12,
    insets = { left = 4, right = 4, top = 4, bottom = 4 }
})
displayFrame:SetBackdropColor(0, 0, 0, 0.85)
displayFrame:SetBackdropBorderColor(0.8, 0.8, 0.8, 0.8)

-- Titel
displayFrame.title = displayFrame:CreateFontString(nil, "OVERLAY", "GameFontNormalLarge")
displayFrame.title:SetPoint("TOP", 0, -5)
displayFrame.title:SetText(L.title)

-- üîÑ Refresh-Button als Icon
local refreshButton = CreateFrame("Button", nil, displayFrame)
refreshButton:SetSize(20, 20)
refreshButton:SetPoint("TOPRIGHT", displayFrame, "TOPRIGHT", -30, -5)

local refreshTexture = refreshButton:CreateTexture(nil, "ARTWORK")
refreshTexture:SetAllPoints()
refreshTexture:SetTexture("Interface\\Buttons\\UI-RefreshButton")

refreshButton:SetScript("OnEnter", function(self)
    GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
    GameTooltip:AddLine(L.refreshHint, 1, 1, 1)
    GameTooltip:Show()
end)
refreshButton:SetScript("OnLeave", function() GameTooltip:Hide() end)
-- OnClick wird sp√§ter gesetzt, nachdem UpdateDungeonList definiert ist

-- ‚öôÔ∏è Settings-Button als Icon
local settingsButton = CreateFrame("Button", nil, displayFrame)
settingsButton:SetSize(20, 20)
settingsButton:SetPoint("TOPRIGHT", displayFrame, "TOPRIGHT", -5, -5)

local gearTexture = settingsButton:CreateTexture(nil, "ARTWORK")
gearTexture:SetAllPoints()
gearTexture:SetTexture("Interface\\Buttons\\UI-OptionsButton")

settingsButton:SetScript("OnEnter", function(self)
    GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
    GameTooltip:AddLine(L.settingsHint, 1, 1, 1)
    GameTooltip:Show()
end)
settingsButton:SetScript("OnLeave", function() GameTooltip:Hide() end)

-- Frame verschiebbar
displayFrame:SetMovable(true)
displayFrame:EnableMouse(true)
displayFrame:RegisterForDrag("LeftButton")
displayFrame:SetScript("OnDragStart", function(self)
    if IsShiftKeyDown() then
        self:StartMoving()
    end
end)
displayFrame:SetScript("OnDragStop", function(self)
    self:StopMovingOrSizing()
    local point, _, relativePoint, xOfs, yOfs = self:GetPoint()
    WhichMythDidIRunDB.pos = {
        point = point,
        relativePoint = relativePoint,
        xOfs = xOfs,
        yOfs = yOfs,
    }
end)

-- Hinweistext
local hint = displayFrame:CreateFontString(nil, "OVERLAY", "GameFontDisableSmall")
hint:SetPoint("BOTTOM", displayFrame, "BOTTOM", 0, 5)
hint:SetText(L.moveHint)

-- Speicher f√ºr Dungeon-Zeilen
local dungeonLines = {}

local function GetLevelColor(level)
    if not level then return GRAY_FONT_COLOR end
    if level >= 15 then return {r=0.7,g=0.3,b=0.9}
    elseif level >= 10 then return {r=0.2,g=0.6,b=1.0}
    else return {r=0.3,g=1.0,b=0.3}
    end
end

-- üî• Verbesserte Update-Funktion mit Debug-Ausgaben
local function UpdateDungeonList(forceUpdate)
    if isUpdating and not forceUpdate then 
        DebugPrint("Update bereits aktiv, √ºberspringe...")
        return 
    end
    isUpdating = true

    DebugPrint("Starte UpdateDungeonList (forceUpdate=" .. tostring(forceUpdate) .. ")")

    -- Neue Daten sammeln
    local newData = {}
    local maps = C_ChallengeMode.GetMapTable()
    if not maps then 
        DebugPrint("Keine Map-Tabelle verf√ºgbar!")
        isUpdating = false
        return 
    end

    DebugPrint("Gefunden " .. #maps .. " Maps")

    local hasChanges = false
    local foundData = 0
    
    for _, mapID in ipairs(maps) do
        local name, _, _, texture = C_ChallengeMode.GetMapUIInfo(mapID)
        if name then
            local best = C_MythicPlus.GetSeasonBestForMap(mapID)
            local level = best and best.level or nil
            local time = best and best.durationSec or nil
            
            if level then
                foundData = foundData + 1
                DebugPrint(name .. " -> Level " .. level)
            end
            
            newData[mapID] = {
                name = name,
                texture = texture,
                level = level,
                time = time
            }
            
            -- Pr√ºfen auf √Ñnderungen
            if not currentDungeonData[mapID] or 
               currentDungeonData[mapID].level ~= level or 
               currentDungeonData[mapID].time ~= time then
                hasChanges = true
            end
        end
    end

    DebugPrint("Gefunden " .. foundData .. " Dungeons mit Daten")

    -- Nur Update wenn sich etwas ge√§ndert hat oder Force-Update
    if not hasChanges and not forceUpdate then
        DebugPrint("Keine √Ñnderungen gefunden, √ºberspringe UI-Update")
        isUpdating = false
        return
    end

    currentDungeonData = newData

    -- UI aktualisieren
    for _, line in ipairs(dungeonLines) do
        line:Hide()
    end
    wipe(dungeonLines)

    local offsetY = -30
    local totalHeight = 40

    for _, mapID in ipairs(maps) do
        local data = newData[mapID]
        if data then
            local row = CreateFrame("Frame", nil, displayFrame)
            row:SetSize(260, 30)
            row:SetPoint("TOPLEFT", 10, offsetY)

            local icon = row:CreateTexture(nil, "ARTWORK")
            icon:SetSize(30, 30)
            icon:SetTexture(data.texture)
            icon:SetPoint("LEFT", row, "LEFT")

            local text = row:CreateFontString(nil, "OVERLAY", "GameFontHighlight")
            text:SetPoint("LEFT", icon, "RIGHT", 5, 0)
            local levelText = data.level and ("+" .. data.level) or "‚Äì"
            local color = GetLevelColor(data.level)
            text:SetText(data.name .. " " .. levelText)
            text:SetTextColor(color.r, color.g, color.b)

            row:SetScript("OnEnter", function()
                if data.time then
                    GameTooltip:SetOwner(row, "ANCHOR_RIGHT")
                    GameTooltip:AddLine(data.name, 1, 1, 1)
                    GameTooltip:AddLine(L.bestTime .. SecondsToClock(data.time), 0.8, 0.8, 0.8)
                    GameTooltip:Show()
                end
            end)
            row:SetScript("OnLeave", function() GameTooltip:Hide() end)

            table.insert(dungeonLines, row)
            offsetY = offsetY - 35
            totalHeight = totalHeight + 35
        end
    end

    displayFrame:SetHeight(totalHeight + 20)
    isUpdating = false
end

-- üîÑ Refresh-Button OnClick Handler jetzt setzen (nach UpdateDungeonList Definition)
refreshButton:SetScript("OnClick", function()
    DebugPrint("Manueller Refresh-Button gedr√ºckt!")
    -- Daten-Cache zur√ºcksetzen f√ºr echtes Force-Update
    wipe(currentDungeonData)
    UpdateDungeonList(true)
    print("Myth+ Daten manuell aktualisiert!")
end)

-- üöÄ Aggressives Polling nach Dungeon-Completion
local pollingTimer = nil
local pollCount = 0

local function StartAggressivePolling()
    DebugPrint("Starte aggressives Polling...")
    if pollingTimer then pollingTimer:Cancel() end
    pollCount = 0
    
    -- Cache leeren f√ºr echte Updates
    wipe(currentDungeonData)
    
    -- Alle 3 Sekunden f√ºr 3 Minuten pr√ºfen
    pollingTimer = C_Timer.NewTicker(3, function()
        DebugPrint("Polling Versuch " .. (pollCount + 1))
        UpdateDungeonList(true)
        pollCount = pollCount + 1
        
        -- Nach 60 Versuchen (3 Minuten) aufh√∂ren
        if pollCount >= 60 then
            DebugPrint("Polling beendet nach " .. pollCount .. " Versuchen")
            pollingTimer:Cancel()
            pollingTimer = nil
        end
    end)
end

-- Interface Options Panel mit Slider
local optionsPanel = CreateFrame("Frame", addonName.."Options", UIParent)
optionsPanel.name = "Which Myth+ Did I Run"

local title = optionsPanel:CreateFontString(nil, "OVERLAY", "GameFontNormalLarge")
title:SetPoint("TOPLEFT", 16, -16)
title:SetText("Which Myth+ Did I Run")

-- üîß Slider + Prozentanzeige
local scaleSlider = CreateFrame("Slider", addonName.."ScaleSlider", optionsPanel, "OptionsSliderTemplate")
scaleSlider:SetOrientation("HORIZONTAL")
scaleSlider:SetSize(200, 20)
scaleSlider:SetPoint("TOPLEFT", title, "BOTTOMLEFT", 0, -30)
scaleSlider:SetMinMaxValues(0.5, 2.0)
scaleSlider:SetValueStep(0.05)
scaleSlider:SetObeyStepOnDrag(true)
scaleSlider:SetValue(WhichMythDidIRunDB.scale or 1.0)

_G[scaleSlider:GetName().."Low"]:SetText("50%")
_G[scaleSlider:GetName().."High"]:SetText("200%")
_G[scaleSlider:GetName().."Text"]:SetText(L.scaleText)

-- Prozentanzeige rechts vom Slider
local scaleValueText = optionsPanel:CreateFontString(nil, "OVERLAY", "GameFontHighlight")
scaleValueText:SetPoint("LEFT", scaleSlider, "RIGHT", 10, 0)
scaleValueText:SetText(string.format("%d%%", (WhichMythDidIRunDB.scale or 1.0) * 100))

scaleSlider:SetScript("OnValueChanged", function(self, value)
    WhichMythDidIRunDB.scale = value
    displayFrame:SetScale(value)
    scaleValueText:SetText(string.format("%d%%", value * 100))
end)

-- Debug-Checkbox (im Optionspanel)
local debugCheckbox = CreateFrame("CheckButton", addonName.."DebugCheckbox", optionsPanel, "InterfaceOptionsCheckButtonTemplate")
debugCheckbox:SetPoint("TOPLEFT", scaleSlider, "BOTTOMLEFT", 0, -30)
debugCheckbox:SetChecked(WhichMythDidIRunDB.debugMode)
_G[debugCheckbox:GetName().."Text"]:SetText(L.debugText)

debugCheckbox:SetScript("OnClick", function(self)
    WhichMythDidIRunDB.debugMode = self:GetChecked()
    if WhichMythDidIRunDB.debugMode then
        print(L.debugPrefix .. " " .. L.debugEnabled)
    else
        print(L.debugPrefix .. " " .. L.debugDisabled)
    end
end)

-- Optionen-Panel registrieren + Category speichern
local category
if Settings and Settings.RegisterCanvasLayoutCategory then
    category = Settings.RegisterCanvasLayoutCategory(optionsPanel, optionsPanel.name)
    Settings.RegisterAddOnCategory(category)
else
    optionsPanel.okay = function() end
    optionsPanel.cancel = function() end
    InterfaceOptions_AddCategory(optionsPanel)
end

-- ‚öôÔ∏è Button √∂ffnet direkt unser Panel
settingsButton:SetScript("OnClick", function()
    if Settings and Settings.OpenToCategory and category then
        Settings.OpenToCategory(category:GetID())
    elseif InterfaceOptionsFrame_OpenToCategory then
        InterfaceOptionsFrame_OpenToCategory(optionsPanel)
        InterfaceOptionsFrame_OpenToCategory(optionsPanel)
    end
end)

-- Frame Visibility Handling
GroupFinderFrame:HookScript("OnShow", function() 
    displayFrame:Show()
    UpdateDungeonList(true)
end)
GroupFinderFrame:HookScript("OnHide", function() displayFrame:Hide() end)
displayFrame:Hide()

-- üéØ Event Handling mit aggressiverem Polling
frame:RegisterEvent("CHALLENGE_MODE_COMPLETED")
frame:RegisterEvent("PLAYER_ENTERING_WORLD")
frame:RegisterEvent("MYTHIC_PLUS_CURRENT_AFFIX_UPDATE")
frame:RegisterEvent("CHALLENGE_MODE_MAPS_UPDATE")
frame:RegisterEvent("CHALLENGE_MODE_LEADERS_UPDATE")

-- Zus√§tzliche Events f√ºr verschiedene WoW-Versionen
local additionalEvents = {
    "MYTHIC_PLUS_NEW_WEEKLY_RECORD",
    "MYTHIC_PLUS_SEASON_STARTED", 
    "MYTHIC_PLUS_SEASON_ENDED",
    "CHALLENGE_MODE_RESET",
    "WEEKLY_REWARDS_UPDATE",
    "PLAYER_LOGOUT",
    "PLAYER_ENTERING_BATTLEGROUND",
    "ZONE_CHANGED_NEW_AREA"
}

for _, event in ipairs(additionalEvents) do
    pcall(function() frame:RegisterEvent(event) end)
end

frame:SetScript("OnEvent", function(self, event, ...)
    DebugPrint(string.format(L.debug_event_received, event))

    if event == "PLAYER_ENTERING_WORLD" then
        local isLogin, isReload = ...
        DebugPrint("PLAYER_ENTERING_WORLD - Login:" .. tostring(isLogin) .. " Reload:" .. tostring(isReload))

        if isLogin or isReload then
            C_Timer.After(2, function()
                DebugPrint("Login-Update nach 2s")
                UpdateDungeonList(true)
            end)
            C_Timer.After(5, function()
                DebugPrint("Login-Update nach 5s")
                UpdateDungeonList(true)
            end)
            C_Timer.After(10, function()
                DebugPrint("Login-Update nach 10s")
                UpdateDungeonList(true)
            end)
        else
            UpdateDungeonList(true)
        end
    elseif event == "CHALLENGE_MODE_COMPLETED" then
        DebugPrint("Myth+ Dungeon abgeschlossen!")
        StartAggressivePolling()
    else
        DebugPrint("Standard-Update f√ºr Event: " .. event)
        C_Timer.After(1, function() UpdateDungeonList(true) end)
    end
end)

-- üîÑ Kontinuierliches Update alle 30 Sekunden (nur wenn sichtbar)
local continuousTimer = nil

local function StartContinuousUpdates()
    if continuousTimer then continuousTimer:Cancel() end
    continuousTimer = C_Timer.NewTicker(30, function()
        if displayFrame:IsShown() then
            UpdateDungeonList()
        end
    end)
end

local function StopContinuousUpdates()
    if continuousTimer then
        continuousTimer:Cancel()
        continuousTimer = nil
    end
end

displayFrame:HookScript("OnShow", StartContinuousUpdates)
displayFrame:HookScript("OnHide", StopContinuousUpdates)

-- üèÅ Initialer Update
C_Timer.After(1, function() UpdateDungeonList(true) end)
